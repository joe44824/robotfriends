{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardComponent","map","_","i","components_Card","key","SearchBox","searchChange","placeholder","onChange","type","Scroll","children","style","overflow","border","height","ErrorBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","searchField","target","value","_this2","fetch","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","ReactDOM","render","StrictMode","src_containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.4e3a6658.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Why are we using React if we are not using it? If you remove it, you get it error\n// So that program will understand JSX\n\nimport React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  // This is called destructuring as well. THe property names are variables\n  // const { name, email, id } = props;\n  // Alt way is to destructure it in parameter { name, email, id }\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow\">\n      {/* For string interpolation, do not use \"\", use `` */}\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n// You have to destructure it because it is not default exported\nimport Card from \"./Card\";\n\n// robots is a property of props so you have to destructure like so { robots }\n\nconst CardList = ({ robots }) => {\n  // Refer to comment below\n  // When you are working with list, you need to give key id\n  const cardComponent = robots.map((_, i) => {\n    return (\n      <Card\n        key={i}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  });\n  return <div>{cardComponent}</div>;\n};\n\nexport default CardList;\n\n// Arrow function\n// map((element) => {\n//   /* ... */\n// });\n// map((element, index) => {\n//   /* ... */\n// });\n// map((element, index, array) => {\n//   /* ... */\n// });\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b-- green bg-lightest-blue\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n        type=\"search\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = ({ children }) => {\n  return (\n    <div\n      style={{\n        overflow: \"scroll\",\n        border: \"5px solid black\",\n        height: \"900px\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  // New Lifecycle method\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n// There are three steps: mounting, updating and unmounting\n// Life cycles methods go in sequence\n// Initially there is no array so after empty array is updated by componentDidMount, render (updating) is called\n// (mounting) contsructor >> (mounting) render >> (mounting) componentDidMount >> (updating) render\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n  }\n  // DO NOT FORGET return statement in arrow function\n\n  //fetch() comes from window - it comes with browser\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((users) => {\n        this.setState({\n          robots: users,\n        });\n      });\n  }\n\n  // Since this is an object (Class compoenent), we have to this when to call onSearchChange\n\n  // Use arrow function to avoid confusion with usage of this and use this.setState to update the state\n\n  // seachField is the text entered and it is saved in searchField\n  // robots is an array so you can use built in filter() to look for robots that have name as\n\n  // Why by default if no entry, it displays everything?\n  // initial state is \"\" - no spacing which is included in every name\n  onSearchChange = (event) => {\n    this.setState({\n      searchField: event.target.value,\n    });\n  };\n\n  // robot.name is a long string eg \"hello world, welcome to paradise\"\n  // input string maybe \"hello\" so you can include to check if \"hello\" is included in robot.name\n\n  // CardList is a child of Scroll Component because cardlist is wrapped by scroll components\n\n  // this.state.robots.length === 0. for 0, you can do !(this.state.robots.length)\n\n  // You can use ternery operator\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = this.state.robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return !robots.length ? (\n      <h1 className=\"f1 tc\">Loading..</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// Functional Components METHOD:\n\n// const state = {\n//     robots: robots,\n//     searchField: ''\n// }\n\n// const App = () => {\n//   return (\n//     <div className=\"tc\">\n//       <h1>RoboFriends</h1>\n//       <SearchBox />\n//       <CardList robots={robots} />\n//     </div>\n//   );\n// };\n\n// export default App;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./containers/App\";\n\nimport \"./index.css\";\n\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}